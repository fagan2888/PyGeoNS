#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
from pygeons import *

## MAIN PROGRAM
#####################################################################
# create the main PyGeoNS argument parser
main = argparse.ArgumentParser(
  usage='pygeons SUBCOMMAND ...',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''PyGeoNS (Python-based Geodetic Network Strain software) 

PyGeoNS is a command line application for identifying transient strain
in daily GPS displacement timeseries. The command which ultimately
carries out this task is 'pygeons strain'. The user will likely want
to first convert the data to an HDF5 format with 'pygeons toh5', crop
the data to a manageable size with 'pygeons crop', clean the data
automatically with 'pygeons autoclean' or manually with 'pygeons
clean', and view the data with 'pygeons vector-view'.

PyGeoNS identifies transient deformation in a Bayesian framework in
that the user must specify a prior stochastic process describing both
the signal and the noise. The signal is described as a
three-dimensional 'network' stochatic process (two spatial dimensions
and one time dimension). The noise can be described as a network
stochastic process or a 'station' stochastic process, which is noise
that is uncorrelated between stations. The hyperparameters for the
stochastic processes can be determined objectively with the Restricted
Maximum Likelihood (REML) method using the command 'pygeons reml'.

The transient deformation and transient strain returned by 'pygeons
strain' can be viewed with the commands 'pygeons vector-view' and
pygeons strain-view' respectively. See the README for a complete
demonstration of PyGeoNS.

PyGeoNS is developed by Trever Hines (hinest@umich.edu) and is
distributed under the MIT license. Please post bug reports, comments,
or suggestions at http://www.github.com/treverhines/PyGeoNS.''')
subs = main.add_subparsers(
  metavar='SUBCOMMAND',
  help=
'''PyGeoNS sub-command. This can be 'info', 'toh5', 'totext',
'vector-view', 'strain-view', 'clean', 'autoclean', 'crop', 'merge',
'strain', 'reml', or 'fit'. Call 'pygeons' followed by the sub-command
and '-h' to see more information.''')

## TOH5
#####################################################################
p = subs.add_parser('toh5',
  usage='pygeons toh5 STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Converts data from a text file to an HDF5 file.

The input text file should be the concatenation of individual station
files with "***" as the delimiter. The station files can have one of
three formats: the PBO csv format, the PBO pos format, or the PyGeoNS
csv format. Indicate the file format by specifying either 'pbocsv',
'pbopos', or 'csv' for *file-type*. See the README for more
information on these file formats.

The resulting HDF5 file will contain data entries for each station in
the text file and for each day ranging from the earliest observation
to the latest. If data does not exist in the text file for a
particular station and day then it will be assigned a value of NaN
with INF uncertainty. This indicates that the data is missing.''')

p.add_argument('input_text_file',**GLOSSARY['input_text_file'])
p.add_argument('-f','--file-type',**GLOSSARY['file_type'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_toh5)

# TOTEXT
#####################################################################
p = subs.add_parser('totext',
  usage='pygeons totext STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Converts data from an HDF5 file to a text file.

The output text file will have the PyGeoNS csv format. If a station is
missing data for the north, east, and vertical component for a
particular day, then that day will not be written to the text file. If
all the data for a station is missing then that station will not be
included in the resulting text file.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_totext)

# INFO
#####################################################################
p = subs.add_parser('info',
  usage='pygeons info STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Displays metadata for an HDF5 data file.''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_info)

# VECTOR-VIEW
#####################################################################
p = subs.add_parser('vector-view',
  usage='pygeons vector-view STR [STR ...] [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Interactively view a data file or multiple data files.

This takes one or multiple HDF5 data files as arguments, allowing for
side-by-side comparison of dataset. Raise the *verbose* flag to display
the instructions for how to interact with the viewer.''')

p.add_argument('input_files',**GLOSSARY['input_files'])
p.add_argument('--dataset-labels',**GLOSSARY['dataset_labels'])
p.add_argument('--colors',**GLOSSARY['colors'])
p.add_argument('--line-styles',**GLOSSARY['line_styles'])
p.add_argument('--error-styles',**GLOSSARY['error_styles'])
p.add_argument('--line-markers',**GLOSSARY['line_markers'])
p.add_argument('--quiver-scale',**GLOSSARY['quiver_scale'])
p.add_argument('--quiver-key-length',**GLOSSARY['quiver_key_length'])
p.add_argument('--quiver-key-pos',**GLOSSARY['quiver_key_pos'])
p.add_argument('--scatter-size',**GLOSSARY['scatter_size'])
p.add_argument('--no-show-vertical',**GLOSSARY['no_show_vertical'])
p.add_argument('--image-clim',**GLOSSARY['image_clim'])
p.add_argument('--image-cmap',**GLOSSARY['image_cmap'])
p.add_argument('--image-resolution',**GLOSSARY['image_resolution'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_vector_view)

# STRAIN-VIEW
#####################################################################
p = subs.add_parser('strain-view',
  usage='pygeons strain-vew STR STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Interactively view strain from the deformation gradients returned by
*pygeons strain*.

This function takes the two HDF5 files returned by *pygeons strain* as
arguments. The x (east) derivative file should be given first followed
by the y (north) derivative file. Raise the *verbose* flag to display
the instructions for how to interact with the viewer.''')

p.add_argument('xdiff_file',**GLOSSARY['xdiff_file'])
p.add_argument('ydiff_file',**GLOSSARY['ydiff_file'])
p.add_argument('--scale',**GLOSSARY['scale'])
p.add_argument('--key-magnitude',**GLOSSARY['key_magnitude'])
p.add_argument('--key-position',**GLOSSARY['key_position'])
p.add_argument('--compression-color',**GLOSSARY['compression_color'])
p.add_argument('--extension-color',**GLOSSARY['extension_color'])
p.add_argument('--vertices',**GLOSSARY['vertices'])
p.add_argument('--alpha',**GLOSSARY['alpha'])
p.add_argument('--snr-mask',**GLOSSARY['snr_mask'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_strain_view)

# CLEAN
#####################################################################
p = subs.add_parser('clean',
  usage='pygeons clean STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Interactively remove jumps and outliers in a data file.

This takes a single HDF5 file as an argument and returns an HDF5 file
as well as a log of edits. Hold down *D* and click and drag on the
time series figure to remove outliers. Hold down *J* and click and
drag on the time series figure to remove jumps. The jump size is the
difference between the mean values over the selected intervals.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('--input-edits-file',**GLOSSARY['input_edits_file'])
p.add_argument('--no-display',**GLOSSARY['no_display'])
p.add_argument('--colors',**GLOSSARY['colors'])
p.add_argument('--line-styles',**GLOSSARY['line_styles'])
p.add_argument('--error-styles',**GLOSSARY['error_styles'])
p.add_argument('--line-markers',**GLOSSARY['line_markers'])
p.add_argument('--quiver-scale',**GLOSSARY['quiver_scale'])
p.add_argument('--quiver-key-length',**GLOSSARY['quiver_key_length'])
p.add_argument('--quiver-key-pos',**GLOSSARY['quiver_key_pos'])
p.add_argument('--scatter-size',**GLOSSARY['scatter_size'])
p.add_argument('--no-show-vertical',**GLOSSARY['no_show_vertical'])
p.add_argument('--image-clim',**GLOSSARY['image_clim'])
p.add_argument('--image-cmap',**GLOSSARY['image_cmap'])
p.add_argument('--image-resolution',**GLOSSARY['image_resolution'])
p.add_argument('--ts-title',**GLOSSARY['ts_title'])
p.add_argument('--map-resolution',**GLOSSARY['map_resolution'])
p.add_argument('--map-title',**GLOSSARY['map_title'])
p.add_argument('--map-xlim',**GLOSSARY['map_xlim'])
p.add_argument('--map-ylim',**GLOSSARY['map_ylim'])
p.add_argument('--fontsize',**GLOSSARY['fontsize'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_clean)

# CROP
#####################################################################
p = subs.add_parser('crop',
  usage='pygeons crop STR [options]',
  description=
'''Spatially and temporally crops an HDF5 data file.

The output HDF5 file will have dates ranging from *start_date* to
*end_date*. The stations in the output file will be within the bounds
set by *min/max_lon/lat*. Unlike for *pygeons clean* or *pygeons
autoclean*, this function removes the dates and stations from the
datset, rather than masking them.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('--start-date',**GLOSSARY['start_date'])
p.add_argument('--stop-date',**GLOSSARY['stop_date'])
p.add_argument('--stations',**GLOSSARY['stations'])
p.add_argument('--min-lat',**GLOSSARY['min_lat'])
p.add_argument('--max-lat',**GLOSSARY['max_lat'])
p.add_argument('--min-lon',**GLOSSARY['min_lon'])
p.add_argument('--max-lon',**GLOSSARY['max_lon'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_crop)

# MERGE
#####################################################################
p = subs.add_parser('merge',
  usage='pygeons merge STR [STR ...] [options]',
  description=
'''Combines multiple HDF5 data files. 

If data files contain data for the same time and station, then the
data from the last-specified file will be used.''')  

p.add_argument('input_files',**GLOSSARY['input_files'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_merge)

# FIT
#####################################################################
p = subs.add_parser('fit',
  usage='pygeons fit STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Fits a Gaussian process to the displacements. This is used to judge
whether a Gaussian process model is appropriate.

This takes an HDF5 file of observed displacements and returns an HDF5
file of posterior displacements. The Gaussian processes specified by
*network-model/params* and *station-model/params* are fit to the
observations. The noise is considered to be uncorrelated with standard
deviation given by the formal data uncertainties.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_fit)

# AUTOCLEAN
#####################################################################
p = subs.add_parser('autoclean',
  usage='pygeons autoclean STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Automatically removes outliers in displacements.

This takes an HDF5 file of observed displacements and returns an HDF5
file of the observed displacements with outliers masked. Outliers are
determined based on how consistent a Gaussian process is with the
observations. The Gaussian process is specified with
*network-model/params* and *station-model/params*.

Automatically removes outliers with a data editing algorithm''')
p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('-t','--outlier-tol',**GLOSSARY['outlier_tol'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_autoclean)

# REML
#####################################################################
p = subs.add_parser('reml',
  usage='pygeons reml STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=
'''Estimates hyperparameters with the restricted maximum likelihood
(REML) method.

The REML method finds the hyperparameters for a Gaussian process which
are most consistent with the displacement observations. This takes an
HDF5 file of displacements and returns a text file of the REML
results. The Gaussian process is specified with *network-model* and
*station-model*. The initial guess for the hyperparameters are
specified with *network-params* and *station-params*.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-model',**GLOSSARY['network_model'])
p.add_argument('--network-params',**GLOSSARY['network_params'])
p.add_argument('--network-fix',**GLOSSARY['network_fix'])
p.add_argument('--station-model',**GLOSSARY['station_model'])
p.add_argument('--station-params',**GLOSSARY['station_params'])
p.add_argument('--station-fix',**GLOSSARY['station_fix'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_reml)

# STRAIN
#####################################################################
p = subs.add_parser('strain',
  usage='pygeons strain STR [options]',
  formatter_class=argparse.RawDescriptionHelpFormatter,
  description=

'''Conditions a Gaussian process with displacements to form a
posterior estimate of transient displacements. The posterior is
spatially and temporally differentiated to form the transient velocity
gradients.

This takes an HDF5 file of displacements and returns two HDF5 files
containing deformation gradients. The output files have the extensions
*dudx* and *dudy* indicating that they are the x (east) and y (north)
derivatives of posterior velocities (displacements if the *no-rate*
flag is raised). The prior Gaussian process is specified with
*network-prior-model/params*. The noise consists of the formal data
uncertainties and the Gaussian processes specified with
*network-noise-model/params* and *station-noise-model/params*.''')

p.add_argument('input_file',**GLOSSARY['input_file'])
p.add_argument('--network-prior-model',**GLOSSARY['network_prior_model'])
p.add_argument('--network-prior-params',**GLOSSARY['network_prior_params'])
p.add_argument('--network-noise-model',**GLOSSARY['network_noise_model'])
p.add_argument('--network-noise-params',**GLOSSARY['network_noise_params'])
p.add_argument('--station-noise-model',**GLOSSARY['station_noise_model'])
p.add_argument('--station-noise-params',**GLOSSARY['station_noise_params'])
p.add_argument('--covariance',**GLOSSARY['covariance'])
p.add_argument('--no-rate',**GLOSSARY['no_rate'])
p.add_argument('--no-vertical',**GLOSSARY['no_vertical'])
p.add_argument('--positions',**GLOSSARY['positions'])
p.add_argument('--positions-file',**GLOSSARY['positions_file'])
p.add_argument('--start-date',**GLOSSARY['start_date'])
p.add_argument('--stop-date',**GLOSSARY['stop_date'])
p.add_argument('-o','--output-stem',**GLOSSARY['output_stem'])
p.add_argument('-v','--verbose',**GLOSSARY['verbose'])
p.set_defaults(func=pygeons_strain)

## PARSE ARGS AND RUN SUB-ROUTINE
#####################################################################
kwargs = vars(main.parse_args())
# toss out Nones and let the lower level functions determine the
# defaults
for k in list(kwargs.keys()):
  if kwargs[k] is None:
    kwargs.pop(k)  

func = kwargs.pop('func')
verbose = kwargs.pop('verbose')
logging.basicConfig(level=30-10*verbose)
logging.captureWarnings(True)
func(**kwargs)
